#include<iostream>
using namespace std;

class marks{
	int subject[3];
	public:
		marks(int sub1, int sub2, int sub3){
			subject[0] = sub1;
			subject[1] = sub2;
			subject[2] = sub3;
		}
		
		int operator[](int position){
			return subject[position];
		}
};

int main(){
	marks m1(45,95,76);
	cout<<m1[0]<<endl;
	cout<<m1[1]<<endl;
	cout<<m1[2]<<endl;
}


#include<iostream>
using namespace std;
class Date
{
  int day;
  int month;
  int year;
  public:
         Date(int d,int m,int y)
         {
            day=d;
            month=m;
            year=y;
         }
         
         friend void operator-(Date &,int);
         friend void operator+(Date &,int);
         void display()
         {
            cout<<"Date:"<<day<<"-"<<month<<"-"<<year<<endl;
         }
};
void operator-(Date &a, int y)
{
    a.day= a.day-y;
    a.month=a.month-y;
	a.year=a.year-y;
 	cout<<"Date:"<<a.day<<"/"<<a.month<<"/"<<a.year<<endl;
}
void  operator+(Date &x,int y)
{
    x.day= x.day+y;
    x.month=x.month+y;
	x.year=x.year+6;
 	cout<<"Date:"<<x.day<<"/"<<x.month<<"/"<<x.year<<endl;
}
int main()
{
    Date d1(10,4,23);
    d1-1;
   	d1+2;
   
    return 0;
}


#include <iostream>
using namespace std;
 
class Complex
{
private:
    int real, imag;
public:
    Complex()
	{
	int r = 0; int i =0;
	}
    Complex(int r, int i)
	{  
	real = r;   imag = i; 
	}
    friend void operator << (ostream &out, const Complex &c);
    friend void operator >> (istream &in,  Complex &c);
};
 
void operator << (ostream &out, const Complex &c)
{
    out << c.real;
    out  <<"+"<< c.imag <<"i"<< endl;
   
}
 
void operator >> (istream &in,  Complex &c)
{
    cout << "Enter Real Part ";
    in >> c.real;
    
    cout << "Enter Imaginary Part ";
    in >> c.imag;
    
}
 
int main()
{
   Complex c1;
   cin >> c1;
   cout << "The complex object is ";
   cout << c1;
   return 0;
}


#include<iostream>
using namespace std;
class complex
{
	int real,img;
public:
	complex();
	complex(int,int);
	void display();
	complex operator++();
	complex operator++(int);
};
complex::complex()
{
	real=img=0;
}
complex::complex(int r,int i)
{
	this->real=r;
	this->img=i;
}
void complex::display()
{
	if(img>0)
	cout<<"complex number is "<<real<<"+"<<img<<"i"<<endl;
	else
	cout<<"complex number is "<<real<<img<<"i"<<endl;
}

complex complex::operator++()
{
	++this->real;
	++this->img;
	return (*this);
}
complex complex::operator++(int)
{
	complex temp= (*this);
	++this->real;
	++this->img;
	return temp;
}
int main()
{
	complex c1(1,2);
	complex c2=++c1;
	c1.display();
	c2.display();
}



#include<iostream>
using namespace std;
class complex
{
	int real,img;

public:
	complex();
	complex(int,int);
	void display();
	complex operator+(complex&);	
};
complex::complex()
{
	real=img=0;
}
complex::complex(int r,int i)
{
	this->real=r;
	this->img=i;
}
void complex::display()
{
	if(img>0)
	cout<<"complex number is "<<real<<"+"<<img<<"i"<<endl;
	else
	cout<<"complex number is "<<real<<img<<"i"<<endl;
}
complex complex::operator+(complex & c)
{
	complex temp;
	temp.real=this->real + c.real;
	temp.img=this->img + c.img;
	return temp;
}

 
int main()
{
	complex c1(1,2);
	complex c2(3,4);
	complex c3=c1+c2;
	c3.display();
}


#include<iostream>
using namespace std;

class bank{
    int amount, withdraw;
    public:
        bank(int amount, int withdraw){
                try
                {
                    this->amount = amount;
                    this->withdraw = withdraw;
                    if(amount>= withdraw){
                    this->amount -= withdraw;
                }else{
                    throw "invalid";
                }
                }
                catch(const char* e)
                {
                    cout<<"invalid transiction"<<endl;
                    cout<< e<<endl;
                }
            }
            void show(){
                cout<<"amount  = "<<this->amount<<endl;
            }
            
        };

int main(){
    int a,b;
    cout<<"enter amount and withdraw : "<<endl;
    cin>>a>>b;
    bank b1(a,b);
    b1.show();
}